x-customizable-image: &customizable_image
  image: ${CUSTOM_IMAGE:-fxgroup/erpnext}:${CUSTOM_TAG:-$ERPNEXT_VERSION}
  pull_policy: ${PULL_POLICY:-always}
  restart: ${RESTART_POLICY:-unless-stopped}

x-depends-on-configurator: &depends_on_configurator
  depends_on:
    configurator:
      condition: service_completed_successfully

x-backend-defaults: &backend_defaults
  <<: *customizable_image
  volumes:
    - sites:/home/frappe/frappe-bench/sites
    - apps:/home/frappe/frappe-bench/apps  # Add shared apps volume

services:
  configurator:
    <<: *backend_defaults
    platform: linux/amd64
    cpus: 2
    mem_limit: 4g
    shm_size: '4gb'
    volumes:
      - ./overrides/bootstrap.sh:/assets/bootstrap.sh:ro
      - ./overrides/pull-and-restore.sh:/home/frappe/frappe-bench/pull-and-restore.sh:ro
      - ./overrides/apps.json:/assets/apps.json:ro
      - sites:/home/frappe/frappe-bench/sites
      - apps:/home/frappe/frappe-bench/apps  # Add apps volume
    entrypoint: ["bash", "/assets/bootstrap.sh"]
    environment:
      - DB_HOST=${DB_HOST:-db}
      - DB_PORT=${DB_PORT:-3306}
      - REDIS_CACHE=${REDIS_CACHE:-redis-cache:6379}
      - REDIS_QUEUE=${REDIS_QUEUE:-redis-queue:6379}
      - SOCKETIO_PORT=${SOCKETIO_PORT:-9000}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-Admin123}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root}
    restart: "no"
    depends_on:
      db: { condition: service_healthy }
      redis-cache: { condition: service_healthy }
      redis-queue: { condition: service_healthy }

  backend:
    <<: [*backend_defaults, *depends_on_configurator]
    platform: linux/amd64
    build:
      context: .
      dockerfile: images/custom/Containerfile
      target: backend
      args:
        - PYTHON_VERSION=${PYTHON_VERSION}
        - DEBIAN_BASE=${DEBIAN_BASE}
        - NODE_VERSION=${NODE_VERSION}
        - WKHTMLTOPDF_VERSION=${WKHTMLTOPDF_VERSION}
        - WKHTMLTOPDF_DISTRO=${WKHTMLTOPDF_DISTRO}
        - FRAPPE_VERSION=${FRAPPE_VERSION}
        - FRAPPE_PATH=${FRAPPE_PATH}
        - ERPNEXT_VERSION=${ERPNEXT_VERSION}
        - ERPNEXT_PATH=${ERPNEXT_PATH}
        - DEFAULT_VERSION=${DEFAULT_VERSION}
        - GITHUB_TOKEN=${GITHUB_TOKEN}
        - APPS_JSON_BASE64="$(base64 -w0 overrides/apps.json)"
    image: fxgroup/erpnext:develop-v15
    # Enable interactive mode for bench commands
    stdin_open: true
    tty: true

  # Single frontend container handling all sites
  frontend:
    <<: *customizable_image
    platform: linux/amd64
    command: [nginx-entrypoint.sh]
    environment:
      BACKEND: backend:8000
      SOCKETIO: websocket:9000
      # Remove FRAPPE_SITE_NAME_HEADER to allow host-based routing
      UPSTREAM_REAL_IP_ADDRESS: ${UPSTREAM_REAL_IP_ADDRESS:-127.0.0.1}
      UPSTREAM_REAL_IP_HEADER: ${UPSTREAM_REAL_IP_HEADER:-X-Forwarded-For}
      UPSTREAM_REAL_IP_RECURSIVE: ${UPSTREAM_REAL_IP_RECURSIVE:-off}
      PROXY_READ_TIMEOUT: ${PROXY_READ_TIMEOUT:-120}
      CLIENT_MAX_BODY_SIZE: ${CLIENT_MAX_BODY_SIZE:-50m}
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - apps:/home/frappe/frappe-bench/apps  # Add apps volume
      - ./overrides/nginx-entrypoint.sh:/usr/local/bin/nginx-entrypoint.sh:ro
      - ./overrides/pull-and-restore.sh:/home/frappe/frappe-bench/pull-and-restore.sh:ro
    ports:
      - "8080:8080"
    depends_on:
      - backend
      - websocket

  websocket:
    <<: [*depends_on_configurator, *customizable_image]
    platform: linux/amd64
    command: [node, /home/frappe/frappe-bench/apps/frappe/socketio.js]
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - apps:/home/frappe/frappe-bench/apps  # Add apps volume
    # Enable interactive mode for debugging
    stdin_open: true
    tty: true

  queue-short:
    <<: [*backend_defaults, *depends_on_configurator]
    platform: linux/amd64
    command: bench worker --queue short,default
    # Enable interactive mode
    stdin_open: true
    tty: true

  queue-long:
    <<: [*backend_defaults, *depends_on_configurator]
    platform: linux/amd64
    command: bench worker --queue long,default,short
    # Enable interactive mode
    stdin_open: true
    tty: true

  scheduler:
    <<: [*backend_defaults, *depends_on_configurator]
    platform: linux/amd64
    command: bench schedule
    # Enable interactive mode
    stdin_open: true
    tty: true

  # External nginx reverse proxy
  nginx-proxy:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-proxy/conf.d:/etc/nginx/conf.d:ro
      - sites:/home/frappe/frappe-bench/sites
      - apps:/home/frappe/frappe-bench/apps:ro  # Use shared volume instead of host mount
    depends_on:
      - frontend
    restart: unless-stopped
    stop_grace_period: 30s  # Give nginx time to finish requests
    stop_signal: SIGQUIT     # Use SIGQUIT for graceful nginx shutdown

  db:
    image: mariadb:10.6
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: frappe
      MYSQL_USER: frappe
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
    command: |
      --bind-address=0.0.0.0
      --skip-name-resolve
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./data/mariadb:/var/lib/mysql
      - ./overrides/my.cnf:/etc/mysql/conf.d/50-dev.cnf:ro
      - ./overrides/my.cnf:/etc/mysql/mariadb.conf.d/50-dev.cnf:ro
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p${MYSQL_ROOT_PASSWORD:-root}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-cache:
    image: redis:7.0-alpine
    command: redis-server --save 900 1 --loglevel warning
    volumes: [redis-cache-data:/data]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-queue:
    image: redis:7.0-alpine
    command: redis-server --save 900 1 --loglevel warning
    volumes: [redis-queue-data:/data]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  sites:
  apps:  # Add the apps volume
  mariadb_data:
  redis-cache-data:
  redis-queue-data: